name: Worker Auto-Updater

on:
  schedule:
    - cron: '0 18 * * *'  # UTC时间18:00 = 北京时间次日02:00
  workflow_dispatch:
    inputs:
      update_mode:
        description: '更新模式 (留空则使用上次配置)'
        required: false
        default: ''
        type: choice
        options:
        - 自动
        - 手动
      release_channel:
        description: '发布渠道 (留空则使用上次配置)'
        required: false
        default: ''
        type: choice
        options:
        - 稳定版
        - 测试版
      deobfuscate:
        description: '反混淆代码 (留空则使用上次配置)'
        required: false
        default: ''
        type: choice
        options:
        - 'true'
        - 'false'

env:
  REPO_URL: https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases
  INSTALL_DIR: .
  DEFAULT_UPDATE_MODE: '自动'
  DEFAULT_RELEASE_CHANNEL: '稳定版'
  DEFAULT_DEOBFUSCATE: 'true'

jobs:
  update-worker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    
    steps:
    # 1. 初始化环境
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    # 2. 配置目录管理
    - name: 创建配置目录
      run: mkdir -p .github/workflows

    - name: 恢复上次配置
      id: restore-config
      continue-on-error: true
      uses: actions/cache@v3
      with:
        path: .github/workflows/last_config.json
        key: worker-config-${{ github.repository }}

    # 3. 参数处理器
    - name: 配置参数处理
      id: config-processor
      run: |
        # 初始化默认值
        CONFIG_UPDATE_MODE="$DEFAULT_UPDATE_MODE"
        CONFIG_RELEASE_CHANNEL="$DEFAULT_RELEASE_CHANNEL"
        CONFIG_DEOBFUSCATE="$DEFAULT_DEOBFUSCATE"

        # 尝试读取缓存配置
        if [ -f ".github/workflows/last_config.json" ]; then
          echo "找到缓存配置"
          CACHE_UPDATE_MODE=$(jq -r '.update_mode // empty' .github/workflows/last_config.json 2>/dev/null || echo "")
          CACHE_RELEASE_CHANNEL=$(jq -r '.release_channel // empty' .github/workflows/last_config.json 2>/dev/null || echo "")
          CACHE_DEOBFUSCATE=$(jq -r '.deobfuscate // empty' .github/workflows/last_config.json 2>/dev/null || echo "")
          
          [ -n "$CACHE_UPDATE_MODE" ] && CONFIG_UPDATE_MODE="$CACHE_UPDATE_MODE"
          [ -n "$CACHE_RELEASE_CHANNEL" ] && CONFIG_RELEASE_CHANNEL="$CACHE_RELEASE_CHANNEL"
          [ -n "$CACHE_DEOBFUSCATE" ] && CONFIG_DEOBFUSCATE="$CACHE_DEOBFUSCATE"
        fi

        # 处理手动输入的参数
        [ -n "${{ inputs.update_mode }}" ] && CONFIG_UPDATE_MODE="${{ inputs.update_mode }}"
        [ -n "${{ inputs.release_channel }}" ] && CONFIG_RELEASE_CHANNEL="${{ inputs.release_channel }}"
        [ -n "${{ inputs.deobfuscate }}" ] && CONFIG_DEOBFUSCATE="${{ inputs.deobfuscate }}"

        # 确保目录存在
        mkdir -p .github/workflows

        # 生成新配置
        jq -n \
          --arg um "$CONFIG_UPDATE_MODE" \
          --arg rc "$CONFIG_RELEASE_CHANNEL" \
          --arg dob "$CONFIG_DEOBFUSCATE" \
          '{update_mode: $um, release_channel: $rc, deobfuscate: $dob}' > .github/workflows/last_config.json

        # 输出到环境变量
        echo "UPDATE_MODE=$CONFIG_UPDATE_MODE" >> $GITHUB_ENV
        echo "RELEASE_CHANNEL=$CONFIG_RELEASE_CHANNEL" >> $GITHUB_ENV
        echo "DEOBFUSCATE=$CONFIG_DEOBFUSCATE" >> $GITHUB_ENV

        echo "最终配置："
        echo "UPDATE_MODE=$CONFIG_UPDATE_MODE"
        echo "RELEASE_CHANNEL=$CONFIG_RELEASE_CHANNEL"
        echo "DEOBFUSCATE=$CONFIG_DEOBFUSCATE"

    # 4. 核心工作流程
    - name: 设置环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install requests semver jsbeautifier

    - name: 清理旧文件
      run: |
        if [ -f "_worker.js" ]; then
          rm -f _worker.js
          echo "已清理旧版worker文件"
        fi

    - name: 获取当前版本信息
      id: get-current-version
      run: |
        if [ -f "README.md" ]; then
          CURRENT_VERSION=$(grep -oP '(?<=版本号: `)[^`]+' README.md | head -1 || echo "")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "当前版本: $CURRENT_VERSION"
        else
          echo "CURRENT_VERSION=" >> $GITHUB_ENV
          echo "没有找到README文件，首次运行"
        fi

    - name: 获取发布信息
      id: get-release
      env:
        CHANNEL: ${{ env.RELEASE_CHANNEL == '稳定版' && 'stable' || 'prerelease' }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        import os
        import requests
        import semver
        import sys
        
        headers = {'Authorization': f"Bearer {os.getenv('GITHUB_TOKEN')}"}
        
        try:
            response = requests.get(os.getenv('REPO_URL'), headers=headers)
            response.raise_for_status()
            releases = response.json()
            
            # 过滤发布渠道
            filtered_releases = []
            channel = os.getenv('CHANNEL')
            for r in releases:
                if channel == 'stable' and not r['prerelease']:
                    filtered_releases.append(r)
                elif channel == 'prerelease' and r['prerelease']:
                    filtered_releases.append(r)
            
            if not filtered_releases:
                print("::notice::没有可用更新")
                # 设置输出变量
                with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                    f.write(f"has_update=false\n")
                    f.write(f"version=none\n")
                sys.exit(0)

            # 版本排序
            def get_version(release):
                try:
                    tag = release['tag_name'].lstrip('v')
                    return semver.VersionInfo.parse(tag)
                except:
                    return semver.VersionInfo.parse("0.0.0")
            
            filtered_releases.sort(key=get_version, reverse=True)
            latest = filtered_releases[0]
            
            js_asset = next((a for a in latest['assets'] if a['name'].endswith('.js')), None)
            
            if not js_asset:
                print("::warning::未找到JS文件")
                with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                    f.write(f"has_update=false\n")
                    f.write(f"version=none\n")
                sys.exit(0)

            # 检查是否有新版本
            current_version = os.getenv('CURRENT_VERSION', '')
            new_version = latest['tag_name']
            
            if current_version == new_version:
                print(f"::notice::当前已是最新版本: {new_version}")
                # 设置标记表示没有更新
                with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                    f.write(f"has_update=false\n")
                    f.write(f"version={new_version}\n")
                    f.write(f"asset_url={js_asset['browser_download_url']}\n")
            else:
                print(f"::notice::发现新版本: {current_version} -> {new_version}")
                with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                    f.write(f"has_update=true\n")
                    f.write(f"version={new_version}\n")
                    f.write(f"asset_url={js_asset['browser_download_url']}\n")

        except Exception as e:
            print(f"::error::获取发布失败: {str(e)}")
            sys.exit(1)
      shell: python

    - name: 下载并处理代码
      if: steps.get-release.outputs.has_update == 'true'
      env:
        DEOBFUSCATE: ${{ env.DEOBFUSCATE }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        import requests
        import jsbeautifier
        import os

        headers = {'Authorization': f"Bearer {os.getenv('GITHUB_TOKEN')}"}
        asset_url = '${{ steps.get-release.outputs.asset_url }}'
        response = requests.get(asset_url, headers=headers)
        response.raise_for_status()
        
        code = response.text
        
        if os.getenv('DEOBFUSCATE') == 'true':
            print("正在反混淆代码...")
            try:
                code = jsbeautifier.beautify(code)
                print("反混淆完成")
            except Exception as e:
                print(f"::warning::反混淆失败: {str(e)}")
        
        with open('_worker.js', 'w', encoding='utf-8') as f:
            f.write(code)
            print("文件保存成功")
      shell: python

    # 5. 文档更新 - 只有在有新版本时才更新README
    - name: 更新README文档
      if: steps.get-release.outputs.has_update == 'true'
      run: |
        # 转换参数为URL安全格式
        UPDATE_MODE_URL=$(echo "${{ env.UPDATE_MODE }}" | sed 's/ /%20/g')
        RELEASE_CHANNEL_URL=$(echo "${{ env.RELEASE_CHANNEL }}" | sed 's/ /%20/g')
        DEOBFUSCATE_URL=$(echo "${{ env.DEOBFUSCATE }}" | tr '[:upper:]' '[:lower:]')

        # 创建README文件
        echo "# 📦 Worker 自动更新系统" > README.md
        echo "" >> README.md
        # 顶部状态徽章
        echo "[![版本](https://img.shields.io/badge/版本-${{ steps.get-release.outputs.version }}-blue)]()" >> README.md
        echo "[![模式](https://img.shields.io/badge/模式-$UPDATE_MODE_URL-yellow)]()" >> README.md
        echo "[![渠道](https://img.shields.io/badge/渠道-$RELEASE_CHANNEL_URL-green)]()" >> README.md
        echo "[![反混淆](https://img.shields.io/badge/反混淆-$DEOBFUSCATE_URL-red)]()" >> README.md
        echo "" >> README.md
        
        echo "## 🚀 功能概述" >> README.md
        echo "- 自动检查并更新Worker脚本" >> README.md
        echo "- 支持定时和手动触发更新" >> README.md
        echo "- 双渠道更新（稳定版/测试版）" >> README.md
        echo "- 自动代码反混淆处理" >> README.md
        echo "- **智能配置记忆** - 自动记住上次的参数选择" >> README.md
        echo "" >> README.md
        
        echo "## 📖 使用说明" >> README.md
        echo "### 🤖 自动模式" >> README.md
        echo "- 每日北京时间02:00自动检查更新" >> README.md
        echo "- 使用上次缓存的工作参数配置" >> README.md
        echo "" >> README.md
        
        echo "### 👆 手动模式" >> README.md
        echo "1. 进入GitHub Actions页面" >> README.md
        echo "2. 选择\"Worker Auto-Updater\"工作流" >> README.md
        echo "3. 点击\"Run workflow\"并选择参数：" >> README.md
        echo "   - 更新模式（自动/手动）" >> README.md
        echo "   - 发布渠道（稳定版/测试版）" >> README.md
        echo "   - 是否反混淆代码（true/false）" >> README.md
        echo "   > 💡 留空参数将使用上次配置" >> README.md
        echo "" >> README.md
        
        echo "## 🔍 当前状态" >> README.md
        echo "### 🛠️ 最新版本" >> README.md
        echo "- 🏷️ **版本号**: \`${{ steps.get-release.outputs.version }}\`" >> README.md
        echo "- ⚙️ **更新模式**: \`${{ env.UPDATE_MODE }}\`" >> README.md
        echo "- 🌿 **发布渠道**: \`${{ env.RELEASE_CHANNEL }}\`" >> README.md
        echo "- 🔧 **反混淆**: \`${{ env.DEOBFUSCATE }}\`" >> README.md
        echo "" >> README.md
        
        echo "> ✅ **更新状态**: 已更新到最新版本" >> README.md
        echo "" >> README.md

    # 6. 提交变更 - 只有在有新版本时才提交
    - name: 提交更新
      if: steps.get-release.outputs.has_update == 'true'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        git add _worker.js README.md
        if git diff-index --quiet HEAD --; then
          echo "没有变更需要提交"
        else
          git commit -m "🔧 更新worker到${{ steps.get-release.outputs.version }} [模式:${{ env.UPDATE_MODE }}]"
          git push
        fi

    # 7. 持久化配置
    - name: 保存当前配置
      uses: actions/cache@v3
      with:
        path: .github/workflows/last_config.json
        key: worker-config-${{ github.repository }}

    # 8. 完成通知
    - name: 输出完成状态
      run: |
        if [ "${{ steps.get-release.outputs.has_update }}" = "true" ]; then
          echo "✅ 更新完成: 已升级到版本 ${{ steps.get-release.outputs.version }}"
        else
          echo "ℹ️ 无更新: 当前已是最新版本 ${{ steps.get-release.outputs.version }}"
        fi
